// automatically generated by the FlatBuffers compiler, do not modify

package com.zpb.fbs.example;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class MonsterRequest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static MonsterRequest getRootAsMonsterRequest(ByteBuffer _bb) { return getRootAsMonsterRequest(_bb, new MonsterRequest()); }
  public static MonsterRequest getRootAsMonsterRequest(ByteBuffer _bb, MonsterRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MonsterRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }

  public static int createMonsterRequest(FlatBufferBuilder builder,
      int nameOffset) {
    builder.startTable(1);
    MonsterRequest.addName(builder, nameOffset);
    return MonsterRequest.endMonsterRequest(builder);
  }

  public static void startMonsterRequest(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static int endMonsterRequest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // name
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MonsterRequest get(int j) { return get(new MonsterRequest(), j); }
    public MonsterRequest get(MonsterRequest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

