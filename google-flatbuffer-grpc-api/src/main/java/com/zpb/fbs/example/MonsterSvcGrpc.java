//Generated by flatc compiler (version 2.0.5)
//If you make any local changes, they will be lost
//source: monster.fbs

package com.zpb.fbs.example;

import com.google.flatbuffers.grpc.FlatbuffersUtils;

import java.nio.ByteBuffer;
import static io.grpc.MethodDescriptor.generateFullMethodName;
import static io.grpc.stub.ClientCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ClientCalls.asyncClientStreamingCall;
import static io.grpc.stub.ClientCalls.asyncServerStreamingCall;
import static io.grpc.stub.ClientCalls.asyncUnaryCall;
import static io.grpc.stub.ClientCalls.blockingServerStreamingCall;
import static io.grpc.stub.ClientCalls.blockingUnaryCall;
import static io.grpc.stub.ClientCalls.futureUnaryCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;

/**
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler",
    comments = "Source: monster.fbs")
public final class MonsterSvcGrpc {

  private MonsterSvcGrpc() {}
  
  public static final String SERVICE_NAME = "com.zpb.fbs.example.MonsterSvc";
  
  // Static method descriptors that strictly reflect the proto.
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getShowMonsterMethod()} instead. 
  public static final io.grpc.MethodDescriptor<com.zpb.fbs.example.MonsterRequest,
      com.zpb.fbs.example.Monster> METHOD_SHOW_MONSTER = getShowMonsterMethod();
  
  private static volatile io.grpc.MethodDescriptor<com.zpb.fbs.example.MonsterRequest,
      com.zpb.fbs.example.Monster> getShowMonsterMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<com.zpb.fbs.example.MonsterRequest> extractorOfMonsterRequest;
  private static FlatbuffersUtils.FBExtactor<com.zpb.fbs.example.MonsterRequest> getExtractorOfMonsterRequest() {
      if (extractorOfMonsterRequest != null) return extractorOfMonsterRequest;
      synchronized (MonsterSvcGrpc.class) {
          if (extractorOfMonsterRequest != null) return extractorOfMonsterRequest;
          extractorOfMonsterRequest = new FlatbuffersUtils.FBExtactor<com.zpb.fbs.example.MonsterRequest>() {
              public com.zpb.fbs.example.MonsterRequest extract (ByteBuffer buffer) {
                  return com.zpb.fbs.example.MonsterRequest.getRootAsMonsterRequest(buffer);
              }
          };
          return extractorOfMonsterRequest;
      }
  }
  
  private static volatile FlatbuffersUtils.FBExtactor<com.zpb.fbs.example.Monster> extractorOfMonster;
  private static FlatbuffersUtils.FBExtactor<com.zpb.fbs.example.Monster> getExtractorOfMonster() {
      if (extractorOfMonster != null) return extractorOfMonster;
      synchronized (MonsterSvcGrpc.class) {
          if (extractorOfMonster != null) return extractorOfMonster;
          extractorOfMonster = new FlatbuffersUtils.FBExtactor<com.zpb.fbs.example.Monster>() {
              public com.zpb.fbs.example.Monster extract (ByteBuffer buffer) {
                  return com.zpb.fbs.example.Monster.getRootAsMonster(buffer);
              }
          };
          return extractorOfMonster;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<com.zpb.fbs.example.MonsterRequest,
      com.zpb.fbs.example.Monster> getShowMonsterMethod() {
    io.grpc.MethodDescriptor<com.zpb.fbs.example.MonsterRequest, com.zpb.fbs.example.Monster> getShowMonsterMethod;
    if ((getShowMonsterMethod = MonsterSvcGrpc.getShowMonsterMethod) == null) {
      synchronized (MonsterSvcGrpc.class) {
        if ((getShowMonsterMethod = MonsterSvcGrpc.getShowMonsterMethod) == null) {
          MonsterSvcGrpc.getShowMonsterMethod = getShowMonsterMethod = 
              io.grpc.MethodDescriptor.<com.zpb.fbs.example.MonsterRequest, com.zpb.fbs.example.Monster>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "com.zpb.fbs.example.MonsterSvc", "ShowMonster"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  com.zpb.fbs.example.MonsterRequest.class, getExtractorOfMonsterRequest()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  com.zpb.fbs.example.Monster.class, getExtractorOfMonster()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getShowMonsterMethod;
  }
  
  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static MonsterSvcStub newStub(io.grpc.Channel channel) {
    return new MonsterSvcStub(channel);
  }
  
  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static MonsterSvcBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    return new MonsterSvcBlockingStub(channel);
  }
  
  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static MonsterSvcFutureStub newFutureStub(
      io.grpc.Channel channel) {
    return new MonsterSvcFutureStub(channel);
  }
  
  /**
   */
  public static abstract class MonsterSvcImplBase implements io.grpc.BindableService {
    
    /**
     * <pre>
     *retrieve a monster by name
     * </pre>
     */
    public     void showMonster(com.zpb.fbs.example.MonsterRequest request,
        io.grpc.stub.StreamObserver<com.zpb.fbs.example.Monster> responseObserver)     {
      asyncUnimplementedUnaryCall(getShowMonsterMethod(), responseObserver);
    }
    
    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
          .addMethod(
            getShowMonsterMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                com.zpb.fbs.example.MonsterRequest,
                com.zpb.fbs.example.Monster>(
                  this, METHODID_SHOW_MONSTER)))
          .build();
    }
  }
  
  /**
   */
  public static final class MonsterSvcStub extends io.grpc.stub.AbstractStub<MonsterSvcStub> {
    private MonsterSvcStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private MonsterSvcStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected MonsterSvcStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new MonsterSvcStub(channel, callOptions);
    }
    
    /**
     * <pre>
     *retrieve a monster by name
     * </pre>
     */
    public     void showMonster(com.zpb.fbs.example.MonsterRequest request,
        io.grpc.stub.StreamObserver<com.zpb.fbs.example.Monster> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getShowMonsterMethod(), getCallOptions()), request, responseObserver);
    }
  }
  
  /**
   */
  public static final class MonsterSvcBlockingStub extends io.grpc.stub.AbstractStub<MonsterSvcBlockingStub> {
    private MonsterSvcBlockingStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private MonsterSvcBlockingStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected MonsterSvcBlockingStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new MonsterSvcBlockingStub(channel, callOptions);
    }
    
    /**
     * <pre>
     *retrieve a monster by name
     * </pre>
     */
    public     com.zpb.fbs.example.Monster showMonster(com.zpb.fbs.example.MonsterRequest request)     {
      return blockingUnaryCall(
          getChannel(), getShowMonsterMethod(), getCallOptions(), request);
    }
  }
  
  /**
   */
  public static final class MonsterSvcFutureStub extends io.grpc.stub.AbstractStub<MonsterSvcFutureStub> {
    private MonsterSvcFutureStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private MonsterSvcFutureStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected MonsterSvcFutureStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new MonsterSvcFutureStub(channel, callOptions);
    }
    
    /**
     * <pre>
     *retrieve a monster by name
     * </pre>
     */
    public     com.google.common.util.concurrent.ListenableFuture<com.zpb.fbs.example.Monster> showMonster(
        com.zpb.fbs.example.MonsterRequest request)     {
      return futureUnaryCall(
          getChannel().newCall(getShowMonsterMethod(), getCallOptions()), request);
    }
  }
  
  private static final int METHODID_SHOW_MONSTER = 0;
  
  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final MonsterSvcImplBase serviceImpl;
    private final int methodId;
  
    MethodHandlers(MonsterSvcImplBase serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }
  
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_SHOW_MONSTER:
          serviceImpl.showMonster((com.zpb.fbs.example.MonsterRequest) request,
              (io.grpc.stub.StreamObserver<com.zpb.fbs.example.Monster>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
  }
  
  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;
  
  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (MonsterSvcGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)              
              .setSchemaDescriptor(null)              
              .addMethod(getShowMonsterMethod())              
              .build();
        }
      }
    }
    return result;
  }
}
